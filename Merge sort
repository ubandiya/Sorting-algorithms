#include <iostream>
#include <vector>
#include <time.h>

using namespace std;

// Function to merge two subarrays of arr[]
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; ++i) {
        L[i] = arr[left + i];
    }
    for (int j = 0; j < n2; ++j) {
        R[j] = arr[mid + 1 + j];
    }

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

// Function to perform merge sort
void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    vector<int> data(size);

    cout << "Enter " << size << " elements of the array:\n";
    for (int i = 0; i < size; ++i) {
        cin >> data[i];
    }

    // Print original data
    cout << "Original data: ";
    for (int num : data) {
        cout << num << " ";
    }
    cout << endl;

    // Sort data using merge sort
    clock_t start, end;
    start = clock();
    mergeSort(data, 0, size - 1);
    end = clock();

    double elapsed = double(end - start) / CLOCKS_PER_SEC * 1000.0;
    std::cout << "Merge Sort took " << elapsed << " ms" << std::endl;

    // Print sorted data
    cout << "Sorted data: ";
    for (int num : data) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
